{
  
    
        "post0": {
            "title": "Food Data Analysis",
            "content": "Pandas and plotting exercises . import pandas as pd . In Week 2, you used a dataset from the CORGIS website. You may have used either the Python, CSV, or JSON data files. . For this assignment, use the CSV file format for the same category of data that you used previously. . food_df = pd.read_csv(&#39;food.csv&#39;) food_df . Category Description Nutrient Data Bank Number Data.Alpha Carotene Data.Beta Carotene Data.Beta Cryptoxanthin Data.Carbohydrate Data.Cholesterol Data.Choline Data.Fiber ... Data.Major Minerals.Phosphorus Data.Major Minerals.Potassium Data.Major Minerals.Sodium Data.Major Minerals.Zinc Data.Vitamins.Vitamin A - RAE Data.Vitamins.Vitamin B12 Data.Vitamins.Vitamin B6 Data.Vitamins.Vitamin C Data.Vitamins.Vitamin E Data.Vitamins.Vitamin K . 0 Milk | Milk, human | 11000000 | 0 | 7 | 0 | 6.89 | 14 | 16.0 | 0.0 | ... | 14 | 51 | 17 | 0.17 | 61 | 0.05 | 0.011 | 5.0 | 0.08 | 0.3 | . 1 Milk | Milk, NFS | 11100000 | 0 | 4 | 0 | 4.87 | 8 | 17.9 | 0.0 | ... | 103 | 157 | 39 | 0.42 | 59 | 0.56 | 0.060 | 0.1 | 0.03 | 0.2 | . 2 Milk | Milk, whole | 11111000 | 0 | 7 | 0 | 4.67 | 12 | 17.8 | 0.0 | ... | 101 | 150 | 38 | 0.41 | 32 | 0.54 | 0.061 | 0.0 | 0.05 | 0.3 | . 3 Milk | Milk, low sodium, whole | 11111100 | 0 | 7 | 0 | 4.46 | 14 | 16.0 | 0.0 | ... | 86 | 253 | 3 | 0.38 | 29 | 0.36 | 0.034 | 0.9 | 0.08 | 0.3 | . 4 Milk | Milk, calcium fortified, whole | 11111150 | 0 | 7 | 0 | 4.67 | 12 | 17.8 | 0.0 | ... | 101 | 150 | 38 | 0.41 | 32 | 0.54 | 0.061 | 0.0 | 0.05 | 0.3 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 7078 Tomatoes as ingredient in omelet | Tomatoes as ingredient in omelet | 99997802 | 103 | 464 | 0 | 5.48 | 0 | 7.4 | 1.6 | ... | 30 | 278 | 6 | 0.21 | 43 | 0.00 | 0.104 | 18.2 | 0.60 | 8.8 | . 7079 Other vegetables as ingredient in omelet | Other vegetables as ingredient in omelet | 99997804 | 1 | 11 | 0 | 4.81 | 0 | 19.4 | 1.4 | ... | 96 | 364 | 6 | 0.58 | 1 | 0.04 | 0.123 | 6.3 | 0.03 | 0.4 | . 7080 Vegetables as ingredient in curry | Vegetables as ingredient in curry | 99997810 | 368 | 994 | 0 | 11.60 | 0 | 14.6 | 2.2 | ... | 46 | 312 | 19 | 0.28 | 98 | 0.00 | 0.177 | 16.2 | 0.24 | 8.9 | . 7081 Sauce as ingredient in hamburgers | Sauce as ingredient in hamburgers | 99998130 | 0 | 194 | 4 | 17.14 | 13 | 20.0 | 0.6 | ... | 33 | 190 | 845 | 0.21 | 21 | 0.04 | 0.104 | 2.5 | 1.90 | 50.8 | . 7082 Industrial oil as ingredient in food | Industrial oil as ingredient in food | 99998210 | 0 | 0 | 0 | 0.00 | 0 | 0.2 | 0.0 | ... | 0 | 0 | 0 | 0.01 | 0 | 0.00 | 0.000 | 0.0 | 10.50 | 155.8 | . 7083 rows × 38 columns . food_df.shape # 7083 columns, 38 rows . (7083, 38) . food_df.columns . Index([&#39;Category&#39;, &#39;Description&#39;, &#39;Nutrient Data Bank Number&#39;, &#39;Data.Alpha Carotene&#39;, &#39;Data.Beta Carotene&#39;, &#39;Data.Beta Cryptoxanthin&#39;, &#39;Data.Carbohydrate&#39;, &#39;Data.Cholesterol&#39;, &#39;Data.Choline&#39;, &#39;Data.Fiber&#39;, &#39;Data.Lutein and Zeaxanthin&#39;, &#39;Data.Lycopene&#39;, &#39;Data.Niacin&#39;, &#39;Data.Protein&#39;, &#39;Data.Retinol&#39;, &#39;Data.Riboflavin&#39;, &#39;Data.Selenium&#39;, &#39;Data.Sugar Total&#39;, &#39;Data.Thiamin&#39;, &#39;Data.Water&#39;, &#39;Data.Fat.Monosaturated Fat&#39;, &#39;Data.Fat.Polysaturated Fat&#39;, &#39;Data.Fat.Saturated Fat&#39;, &#39;Data.Fat.Total Lipid&#39;, &#39;Data.Major Minerals.Calcium&#39;, &#39;Data.Major Minerals.Copper&#39;, &#39;Data.Major Minerals.Iron&#39;, &#39;Data.Major Minerals.Magnesium&#39;, &#39;Data.Major Minerals.Phosphorus&#39;, &#39;Data.Major Minerals.Potassium&#39;, &#39;Data.Major Minerals.Sodium&#39;, &#39;Data.Major Minerals.Zinc&#39;, &#39;Data.Vitamins.Vitamin A - RAE&#39;, &#39;Data.Vitamins.Vitamin B12&#39;, &#39;Data.Vitamins.Vitamin B6&#39;, &#39;Data.Vitamins.Vitamin C&#39;, &#39;Data.Vitamins.Vitamin E&#39;, &#39;Data.Vitamins.Vitamin K&#39;], dtype=&#39;object&#39;) . food_df.dtypes . Category object Description object Nutrient Data Bank Number int64 Data.Alpha Carotene int64 Data.Beta Carotene int64 Data.Beta Cryptoxanthin int64 Data.Carbohydrate float64 Data.Cholesterol int64 Data.Choline float64 Data.Fiber float64 Data.Lutein and Zeaxanthin int64 Data.Lycopene int64 Data.Niacin float64 Data.Protein float64 Data.Retinol int64 Data.Riboflavin float64 Data.Selenium float64 Data.Sugar Total float64 Data.Thiamin float64 Data.Water float64 Data.Fat.Monosaturated Fat float64 Data.Fat.Polysaturated Fat float64 Data.Fat.Saturated Fat float64 Data.Fat.Total Lipid float64 Data.Major Minerals.Calcium int64 Data.Major Minerals.Copper float64 Data.Major Minerals.Iron float64 Data.Major Minerals.Magnesium int64 Data.Major Minerals.Phosphorus int64 Data.Major Minerals.Potassium int64 Data.Major Minerals.Sodium int64 Data.Major Minerals.Zinc float64 Data.Vitamins.Vitamin A - RAE int64 Data.Vitamins.Vitamin B12 float64 Data.Vitamins.Vitamin B6 float64 Data.Vitamins.Vitamin C float64 Data.Vitamins.Vitamin E float64 Data.Vitamins.Vitamin K float64 dtype: object . food_df.head(2) . Category Description Nutrient Data Bank Number Data.Alpha Carotene Data.Beta Carotene Data.Beta Cryptoxanthin Data.Carbohydrate Data.Cholesterol Data.Choline Data.Fiber ... Data.Major Minerals.Phosphorus Data.Major Minerals.Potassium Data.Major Minerals.Sodium Data.Major Minerals.Zinc Data.Vitamins.Vitamin A - RAE Data.Vitamins.Vitamin B12 Data.Vitamins.Vitamin B6 Data.Vitamins.Vitamin C Data.Vitamins.Vitamin E Data.Vitamins.Vitamin K . 0 Milk | Milk, human | 11000000 | 0 | 7 | 0 | 6.89 | 14 | 16.0 | 0.0 | ... | 14 | 51 | 17 | 0.17 | 61 | 0.05 | 0.011 | 5.0 | 0.08 | 0.3 | . 1 Milk | Milk, NFS | 11100000 | 0 | 4 | 0 | 4.87 | 8 | 17.9 | 0.0 | ... | 103 | 157 | 39 | 0.42 | 59 | 0.56 | 0.060 | 0.1 | 0.03 | 0.2 | . 2 rows × 38 columns . food_df.tail(2) . Category Description Nutrient Data Bank Number Data.Alpha Carotene Data.Beta Carotene Data.Beta Cryptoxanthin Data.Carbohydrate Data.Cholesterol Data.Choline Data.Fiber ... Data.Major Minerals.Phosphorus Data.Major Minerals.Potassium Data.Major Minerals.Sodium Data.Major Minerals.Zinc Data.Vitamins.Vitamin A - RAE Data.Vitamins.Vitamin B12 Data.Vitamins.Vitamin B6 Data.Vitamins.Vitamin C Data.Vitamins.Vitamin E Data.Vitamins.Vitamin K . 7081 Sauce as ingredient in hamburgers | Sauce as ingredient in hamburgers | 99998130 | 0 | 194 | 4 | 17.14 | 13 | 20.0 | 0.6 | ... | 33 | 190 | 845 | 0.21 | 21 | 0.04 | 0.104 | 2.5 | 1.9 | 50.8 | . 7082 Industrial oil as ingredient in food | Industrial oil as ingredient in food | 99998210 | 0 | 0 | 0 | 0.00 | 0 | 0.2 | 0.0 | ... | 0 | 0 | 0 | 0.01 | 0 | 0.00 | 0.000 | 0.0 | 10.5 | 155.8 | . 2 rows × 38 columns . food_df.describe() . Nutrient Data Bank Number Data.Alpha Carotene Data.Beta Carotene Data.Beta Cryptoxanthin Data.Carbohydrate Data.Cholesterol Data.Choline Data.Fiber Data.Lutein and Zeaxanthin Data.Lycopene ... Data.Major Minerals.Phosphorus Data.Major Minerals.Potassium Data.Major Minerals.Sodium Data.Major Minerals.Zinc Data.Vitamins.Vitamin A - RAE Data.Vitamins.Vitamin B12 Data.Vitamins.Vitamin B6 Data.Vitamins.Vitamin C Data.Vitamins.Vitamin E Data.Vitamins.Vitamin K . count 7.083000e+03 | 7083.000000 | 7083.000000 | 7083.000000 | 7083.000000 | 7083.000000 | 7083.000000 | 7083.000000 | 7083.000000 | 7083.000000 | ... | 7083.000000 | 7083.000000 | 7083.000000 | 7083.000000 | 7083.000000 | 7083.000000 | 7083.000000 | 7083.000000 | 7083.000000 | 7083.000000 | . mean 4.884965e+07 | 43.759283 | 255.363405 | 4.862346 | 20.828039 | 34.458845 | 34.440802 | 1.703840 | 213.351687 | 263.571933 | ... | 133.088945 | 217.127488 | 340.503459 | 1.281451 | 73.139065 | 0.705177 | 0.197528 | 5.696216 | 1.086955 | 14.206607 | . std 2.425159e+07 | 259.520139 | 995.709951 | 38.047657 | 21.887363 | 77.479105 | 43.901497 | 2.558168 | 1015.888615 | 1161.245139 | ... | 126.498700 | 204.812523 | 350.333632 | 2.917233 | 241.913126 | 2.502821 | 0.374608 | 15.548490 | 3.133890 | 54.944096 | . min 1.100000e+07 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | ... | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 25% 2.715077e+07 | 0.000000 | 0.000000 | 0.000000 | 5.650000 | 0.000000 | 10.000000 | 0.100000 | 0.000000 | 0.000000 | ... | 48.000000 | 111.000000 | 124.000000 | 0.360000 | 2.000000 | 0.000000 | 0.052000 | 0.000000 | 0.230000 | 0.800000 | . 50% 5.326020e+07 | 0.000000 | 8.000000 | 0.000000 | 13.300000 | 8.000000 | 19.600000 | 1.000000 | 18.000000 | 0.000000 | ... | 102.000000 | 183.000000 | 313.000000 | 0.680000 | 20.000000 | 0.180000 | 0.110000 | 0.700000 | 0.550000 | 3.800000 | . 75% 6.720345e+07 | 1.000000 | 73.000000 | 1.000000 | 26.195000 | 46.000000 | 44.200000 | 2.100000 | 81.000000 | 0.000000 | ... | 189.000000 | 270.500000 | 454.000000 | 1.360000 | 61.000000 | 0.550000 | 0.203000 | 5.300000 | 1.110000 | 9.300000 | . max 9.999821e+07 | 4655.000000 | 14134.000000 | 1922.000000 | 100.000000 | 3074.000000 | 820.200000 | 46.200000 | 15643.000000 | 45902.000000 | ... | 1429.000000 | 6040.000000 | 7851.000000 | 98.860000 | 9363.000000 | 82.440000 | 12.000000 | 560.000000 | 149.400000 | 1640.000000 | . 8 rows × 36 columns . food_df[&#39;Description&#39;] . 0 Milk, human 1 Milk, NFS 2 Milk, whole 3 Milk, low sodium, whole 4 Milk, calcium fortified, whole ... 7078 Tomatoes as ingredient in omelet 7079 Other vegetables as ingredient in omelet 7080 Vegetables as ingredient in curry 7081 Sauce as ingredient in hamburgers 7082 Industrial oil as ingredient in food Name: Description, Length: 7083, dtype: object . import matplotlib.pyplot as plt set1 = food_df.loc[food_df[&#39;Category&#39;] == &#39;Milk&#39;] . set1.plot(kind=&#39;line&#39;, y=&#39;Data.Carbohydrate&#39;) . &lt;AxesSubplot:&gt; . set1.loc[:9] . Category Description Nutrient Data Bank Number Data.Alpha Carotene Data.Beta Carotene Data.Beta Cryptoxanthin Data.Carbohydrate Data.Cholesterol Data.Choline Data.Fiber ... Data.Major Minerals.Phosphorus Data.Major Minerals.Potassium Data.Major Minerals.Sodium Data.Major Minerals.Zinc Data.Vitamins.Vitamin A - RAE Data.Vitamins.Vitamin B12 Data.Vitamins.Vitamin B6 Data.Vitamins.Vitamin C Data.Vitamins.Vitamin E Data.Vitamins.Vitamin K . 0 Milk | Milk, human | 11000000 | 0 | 7 | 0 | 6.89 | 14 | 16.0 | 0.0 | ... | 14 | 51 | 17 | 0.17 | 61 | 0.05 | 0.011 | 5.0 | 0.08 | 0.3 | . 1 Milk | Milk, NFS | 11100000 | 0 | 4 | 0 | 4.87 | 8 | 17.9 | 0.0 | ... | 103 | 157 | 39 | 0.42 | 59 | 0.56 | 0.060 | 0.1 | 0.03 | 0.2 | . 2 Milk | Milk, whole | 11111000 | 0 | 7 | 0 | 4.67 | 12 | 17.8 | 0.0 | ... | 101 | 150 | 38 | 0.41 | 32 | 0.54 | 0.061 | 0.0 | 0.05 | 0.3 | . 3 Milk | Milk, low sodium, whole | 11111100 | 0 | 7 | 0 | 4.46 | 14 | 16.0 | 0.0 | ... | 86 | 253 | 3 | 0.38 | 29 | 0.36 | 0.034 | 0.9 | 0.08 | 0.3 | . 4 Milk | Milk, calcium fortified, whole | 11111150 | 0 | 7 | 0 | 4.67 | 12 | 17.8 | 0.0 | ... | 101 | 150 | 38 | 0.41 | 32 | 0.54 | 0.061 | 0.0 | 0.05 | 0.3 | . 5 Milk | Milk, calcium fortified, low fat (1%) | 11111160 | 0 | 1 | 0 | 5.19 | 5 | 17.4 | 0.0 | ... | 103 | 159 | 39 | 0.43 | 58 | 0.61 | 0.060 | 0.0 | 0.02 | 0.1 | . 6 Milk | Milk, calcium fortified, fat free (skim) | 11111170 | 0 | 0 | 0 | 4.85 | 2 | 16.0 | 0.0 | ... | 101 | 166 | 52 | 0.40 | 137 | 0.38 | 0.040 | 1.0 | 0.01 | 0.0 | . 7 Milk | Milk, reduced fat (2%) | 11112110 | 0 | 3 | 0 | 4.91 | 8 | 18.2 | 0.0 | ... | 103 | 159 | 39 | 0.43 | 83 | 0.55 | 0.061 | 0.2 | 0.03 | 0.2 | . 8 Milk | Milk, acidophilus, low fat (1%) | 11112120 | 0 | 1 | 0 | 5.19 | 5 | 17.4 | 0.0 | ... | 103 | 159 | 39 | 0.43 | 58 | 0.61 | 0.060 | 0.0 | 0.02 | 0.1 | . 9 Milk | Milk, acidophilus, reduced fat (2%) | 11112130 | 0 | 3 | 0 | 4.91 | 8 | 18.2 | 0.0 | ... | 103 | 159 | 39 | 0.43 | 83 | 0.55 | 0.061 | 0.2 | 0.03 | 0.2 | . 10 rows × 38 columns . # as well as the matching 10 elements of a different column that has interesting text food_df.loc[0:9,[&#39;Description&#39;,&#39;Data.Carbohydrate&#39;]] . Description Data.Carbohydrate . 0 Milk, human | 6.89 | . 1 Milk, NFS | 4.87 | . 2 Milk, whole | 4.67 | . 3 Milk, low sodium, whole | 4.46 | . 4 Milk, calcium fortified, whole | 4.67 | . 5 Milk, calcium fortified, low fat (1%) | 5.19 | . 6 Milk, calcium fortified, fat free (skim) | 4.85 | . 7 Milk, reduced fat (2%) | 4.91 | . 8 Milk, acidophilus, low fat (1%) | 5.19 | . 9 Milk, acidophilus, reduced fat (2%) | 4.91 | . # and make a bar plot with the text values horizontally and the numeric values as the bar heights new_food_df = food_df.loc[0:9,[&#39;Description&#39;,&#39;Data.Carbohydrate&#39;]] new_food_df.plot(kind=&#39;bar&#39;, x=&#39;Description&#39;, y=&#39;Data.Carbohydrate&#39;, figsize=(12,5)) . &lt;AxesSubplot:xlabel=&#39;Description&#39;&gt; . new_food_df.plot(kind=&#39;barh&#39;, x=&#39;Description&#39;, y=&#39;Data.Carbohydrate&#39;, figsize=(12,5)) . &lt;AxesSubplot:ylabel=&#39;Description&#39;&gt; . # and change at least two aesthetic elements (colors, labels, titles, ...) barcolors = [] for i in new_food_df.index: if new_food_df[&#39;Data.Carbohydrate&#39;][i] &gt; 5: barcolors.append(&#39;lightseagreen&#39;) elif new_food_df[&#39;Data.Carbohydrate&#39;][i] &lt; 5: barcolors.append(&#39;turquoise&#39;) ax = new_food_df.plot(kind=&#39;barh&#39;, x=&#39;Description&#39;, y=&#39;Data.Carbohydrate&#39;, figsize=(12,5), color=barcolors) ax.legend([&#39;Carbohydrates&#39;]) ax.set_title(&#39;Carbohydrate Amount in Different Milks&#39;, fontsize=15) ax.set_xlabel(&#39;Carbohydrates&#39;,fontsize=13) ax.set_ylabel(&#39;Milk Type&#39;,fontsize=13) . Text(0, 0.5, &#39;Milk Type&#39;) . Free form section . Choose another type of plot that interests you from the pandas.DataFrame.plot documentation [look at the &#39;kind&#39; parameter] and make a new plot of your dataset values using the plot type | . new_food_df.plot(kind=&#39;density&#39;, x=&#39;Description&#39;, y=&#39;Data.Carbohydrate&#39;, figsize=(12,5)) . &lt;AxesSubplot:ylabel=&#39;Density&#39;&gt; . Copy some of your analysis from the Week 2 assignment into new cells below | Clean them up if desired, and make sure that you translate them to work with your new pandas dataframe structure here if needed | Create several plots to complement and extend your analysis | . import food report = food.get_report() yogurtDict = report[48] yogurtNutritionDict = yogurtDict[&#39;Data&#39;] yogurtNutritionDict . {&#39;Alpha Carotene&#39;: 0, &#39;Beta Carotene&#39;: 5, &#39;Beta Cryptoxanthin&#39;: 0, &#39;Carbohydrate&#39;: 4.66, &#39;Cholesterol&#39;: 13, &#39;Choline&#39;: 15.2, &#39;Fiber&#39;: 0.0, &#39;Lutein and Zeaxanthin&#39;: 0, &#39;Lycopene&#39;: 0, &#39;Niacin&#39;: 0.075, &#39;Protein&#39;: 3.47, &#39;Retinol&#39;: 27, &#39;Riboflavin&#39;: 0.142, &#39;Selenium&#39;: 2.2, &#39;Sugar Total&#39;: 4.66, &#39;Thiamin&#39;: 0.029, &#39;Water&#39;: 87.89, &#39;Fat&#39;: {&#39;Monosaturated Fat&#39;: 0.893, &#39;Polysaturated Fat&#39;: 0.092, &#39;Saturated Fat&#39;: 2.096, &#39;Total Lipid&#39;: 3.25}, &#39;Major Minerals&#39;: {&#39;Calcium&#39;: 121, &#39;Copper&#39;: 0.009, &#39;Iron&#39;: 0.05, &#39;Magnesium&#39;: 12, &#39;Phosphorus&#39;: 95, &#39;Potassium&#39;: 155, &#39;Sodium&#39;: 46, &#39;Zinc&#39;: 0.59}, &#39;Vitamins&#39;: {&#39;Vitamin A - RAE&#39;: 27, &#39;Vitamin B12&#39;: 0.37, &#39;Vitamin B6&#39;: 0.032, &#39;Vitamin C&#39;: 0.5, &#39;Vitamin E&#39;: 0.06, &#39;Vitamin K&#39;: 0.2}} . def recursiveflatten(parentDict, subDict): for key in list(subDict.keys()): if type(subDict[key]) == type(dict()): recursiveflatten(parentDict, subDict[key]) subDict.pop(key) else: parentDict[key] = subDict[key] recursiveflatten(yogurtNutritionDict, yogurtNutritionDict) #yogurtNutritionDict #make table of keys and values of yogurt nutrition facts yoNutriList = list(yogurtNutritionDict) yoNutriList2 = list(yogurtNutritionDict.values()) pd.DataFrame(yoNutriList2, yoNutriList) . 0 . Alpha Carotene 0.000 | . Beta Carotene 5.000 | . Beta Cryptoxanthin 0.000 | . Carbohydrate 4.660 | . Cholesterol 13.000 | . Choline 15.200 | . Fiber 0.000 | . Lutein and Zeaxanthin 0.000 | . Lycopene 0.000 | . Niacin 0.075 | . Protein 3.470 | . Retinol 27.000 | . Riboflavin 0.142 | . Selenium 2.200 | . Sugar Total 4.660 | . Thiamin 0.029 | . Water 87.890 | . Monosaturated Fat 0.893 | . Polysaturated Fat 0.092 | . Saturated Fat 2.096 | . Total Lipid 3.250 | . Calcium 121.000 | . Copper 0.009 | . Iron 0.050 | . Magnesium 12.000 | . Phosphorus 95.000 | . Potassium 155.000 | . Sodium 46.000 | . Zinc 0.590 | . Vitamin A - RAE 27.000 | . Vitamin B12 0.370 | . Vitamin B6 0.032 | . Vitamin C 0.500 | . Vitamin E 0.060 | . Vitamin K 0.200 | . yogurtGraph = pd.DataFrame(yoNutriList2, yoNutriList) ax = yogurtGraph.plot(kind=&#39;bar&#39;, figsize=(12,5)) ax.legend([&#39;mg&#39;]) ax.set_title(&#39;Yogurt Nutrition Facts&#39;, fontsize=15) ax.set_xlabel(&#39;Nutrition&#39;,fontsize=13) ax.set_ylabel(&#39;mg&#39;,fontsize=13) . Text(0, 0.5, &#39;mg&#39;) . ax = yogurtGraph.plot(kind=&#39;barh&#39;, figsize=(12,5)) ax.legend([&#39;mg&#39;]) ax.set_title(&#39;Yogurt Nutrition Facts&#39;, fontsize=15) ax.set_xlabel(&#39;mg&#39;,fontsize=13) ax.set_ylabel(&#39;Nutrition&#39;,fontsize=13) . Text(0, 0.5, &#39;Nutrition&#39;) . yogurtGraph.plot(kind=&#39;pie&#39;, figsize=(15,15), subplots=True) . array([&lt;AxesSubplot:ylabel=&#39;0&#39;&gt;], dtype=object) .",
            "url": "https://alex-lansing.github.io/Food-Analysis-Blog/fastpages/jupyter/2022/03/06/Food-Analysis.html",
            "relUrl": "/fastpages/jupyter/2022/03/06/Food-Analysis.html",
            "date": " • Mar 6, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://alex-lansing.github.io/Food-Analysis-Blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://alex-lansing.github.io/Food-Analysis-Blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://alex-lansing.github.io/Food-Analysis-Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://alex-lansing.github.io/Food-Analysis-Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}